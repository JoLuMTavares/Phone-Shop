{"ast":null,"code":"import _regeneratorRuntime from \"/home/devugees/Desktop/reactjs/quiz/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/devugees/Desktop/reactjs/quiz/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/devugees/Desktop/reactjs/quiz/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/devugees/Desktop/reactjs/quiz/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/devugees/Desktop/reactjs/quiz/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/devugees/Desktop/reactjs/quiz/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/devugees/Desktop/reactjs/quiz/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/devugees/Desktop/reactjs/quiz/src/Context.js\";\nimport React, { Component } from 'react';\nimport axios from 'axios'; // Just created context and they will provide : Provider and Consumer\n\nvar Context = React.createContext();\n/*\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'ADD_IMAGE':\n      return {\n        images: [...state.groiu, action.newImage]\n      };\n\n    default:\n      return state;\n  }\n};\n*/\n\nexport var Provider =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Provider, _Component);\n\n  function Provider() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Provider);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Provider)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      groups: [{\n        id: '',\n        question: '',\n        answer1: '',\n        answer2: '',\n        answer3: '',\n        right: '',\n        congrats: '',\n        reaction: ''\n      }],\n      dispatch: function dispatch(action) {\n        _this.setState(function (state) {\n          return reducer(state, action);\n        });\n      }\n    };\n    return _this;\n  }\n\n  _createClass(Provider, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                _context.next = 3;\n                return axios.get('http://localhost:1024/loadquiz');\n\n              case 3:\n                response = _context.sent;\n                console.log(response);\n                this.setState({\n                  groups: response.data.quiz\n                }); // console.log(this.state.groups);\n\n                _context.next = 11;\n                break;\n\n              case 8:\n                _context.prev = 8;\n                _context.t0 = _context[\"catch\"](0);\n                console.log(_context.t0);\n\n              case 11:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[0, 8]]);\n      }));\n\n      return function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      };\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Context.Provider, {\n        value: this.state,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, this.props.children);\n    }\n  }]);\n\n  return Provider;\n}(Component);\nexport var Consumer = Context.Consumer;","map":{"version":3,"sources":["/home/devugees/Desktop/reactjs/quiz/src/Context.js"],"names":["React","Component","axios","Context","createContext","Provider","state","groups","id","question","answer1","answer2","answer3","right","congrats","reaction","dispatch","action","setState","reducer","get","response","console","log","data","quiz","props","children","Consumer"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CACA;;AACA,IAAMC,OAAO,GAAGH,KAAK,CAACI,aAAN,EAAhB;AAEA;;;;;;;;;;;;;;AAcA,WAAaC,QAAb;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA,UACEC,KADF,GACU;AACNC,MAAAA,MAAM,EAAE,CACN;AACEC,QAAAA,EAAE,EAAE,EADN;AAEEC,QAAAA,QAAQ,EAAE,EAFZ;AAGEC,QAAAA,OAAO,EAAE,EAHX;AAIEC,QAAAA,OAAO,EAAE,EAJX;AAKEC,QAAAA,OAAO,EAAE,EALX;AAMEC,QAAAA,KAAK,EAAE,EANT;AAOEC,QAAAA,QAAQ,EAAE,EAPZ;AAQEC,QAAAA,QAAQ,EAAE;AARZ,OADM,CADF;AAaNC,MAAAA,QAAQ,EAAE,kBAAAC,MAAM,EAAI;AAClB,cAAKC,QAAL,CAAc,UAAAZ,KAAK;AAAA,iBAAIa,OAAO,CAACb,KAAD,EAAQW,MAAR,CAAX;AAAA,SAAnB;AACD;AAfK,KADV;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAqB6Bf,KAAK,CAACkB,GAAN,CAAU,gCAAV,CArB7B;;AAAA;AAqBYC,gBAAAA,QArBZ;AAsBMC,gBAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AAEA,qBAAKH,QAAL,CAAc;AACZX,kBAAAA,MAAM,EAAEc,QAAQ,CAACG,IAAT,CAAcC;AADV,iBAAd,EAxBN,CA2BM;;AA3BN;AAAA;;AAAA;AAAA;AAAA;AA6BMH,gBAAAA,OAAO,CAACC,GAAR;;AA7BN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAiCW;AACP,aACE,oBAAC,OAAD,CAAS,QAAT;AAAkB,QAAA,KAAK,EAAE,KAAKjB,KAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,KAAKoB,KAAL,CAAWC,QADd,CADF;AAKD;AAvCH;;AAAA;AAAA,EAA8B1B,SAA9B;AA0CA,OAAO,IAAM2B,QAAQ,GAAGzB,OAAO,CAACyB,QAAzB","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\n// Just created context and they will provide : Provider and Consumer\nconst Context = React.createContext();\n\n/*\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'ADD_IMAGE':\n      return {\n        images: [...state.groiu, action.newImage]\n      };\n\n    default:\n      return state;\n  }\n};\n*/\n\nexport class Provider extends Component {\n  state = {\n    groups: [\n      {\n        id: '',\n        question: '',\n        answer1: '',\n        answer2: '',\n        answer3: '',\n        right: '',\n        congrats: '',\n        reaction: ''\n      }\n    ],\n    dispatch: action => {\n      this.setState(state => reducer(state, action));\n    }\n  };\n\n  async componentDidMount() {\n    try {\n      const response = await axios.get('http://localhost:1024/loadquiz');\n      console.log(response);\n\n      this.setState({\n        groups: response.data.quiz\n      });\n      // console.log(this.state.groups);\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  render() {\n    return (\n      <Context.Provider value={this.state}>\n        {this.props.children}\n      </Context.Provider>\n    );\n  }\n}\n\nexport const Consumer = Context.Consumer;\n"]},"metadata":{},"sourceType":"module"}