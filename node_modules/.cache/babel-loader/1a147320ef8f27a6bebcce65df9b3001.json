{"ast":null,"code":"import _classCallCheck from \"/home/devugees/Desktop/reactjs/quiz/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/devugees/Desktop/reactjs/quiz/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/devugees/Desktop/reactjs/quiz/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/devugees/Desktop/reactjs/quiz/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/devugees/Desktop/reactjs/quiz/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/devugees/Desktop/reactjs/quiz/src/components/Group.js\";\nimport React, { Component } from 'react';\nimport propTypes from 'prop-types';\nimport { Consumer } from '../Context';\nimport axios from 'axios';\nimport { Button, Form, FormGroup, Label, Input, FormText } from 'reactstrap'; // JSX\n\nvar Group =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Group, _Component);\n\n  function Group() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Group);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Group)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      answered: false,\n      passed: false\n      /* This function verifies if the user chose the right answer.\n         If so, the \"passed\" variable is updated to \"true\". This way \n         the greetings are shown. If not, the notification of\n         wrong answer must come out.\n         Also the variable \"answered\" must be set to true,\n         so the user can see the result of the made choice.\n      */\n\n    };\n\n    _this.showResult = function (right, event) {\n      event.preventDefault();\n      if (dataId === right) _this.setState({\n        passed: true\n      });\n\n      _this.setState({\n        answered: true\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(Group, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props$group = this.props.group,\n          id = _this$props$group.id,\n          image = _this$props$group.image,\n          question = _this$props$group.question,\n          answer1 = _this$props$group.answer1,\n          answer2 = _this$props$group.answer2,\n          answer3 = _this$props$group.answer3,\n          right = _this$props$group.right,\n          congrats = _this$props$group.congrats,\n          reaction = _this$props$group.reaction;\n      /*\n          let imageHeader = {\n            display: 'flex',\n            flexDirection: 'row',\n            justifyContent: 'space-between'\n          };\n      \n          let buttonStyle = {\n            borderRadius: '3px',\n            backgroundColor: '#e33',\n            color: 'white',\n            width: '36px',\n            height: '36px',\n            boxShadow:\n              '0 4px 8px 0 rgba(128, 98, 31, 0.2), 0 6px 20px 0 rgba(128, 98, 31, 0.19)',\n            fontSize: '1.0em',\n      \n            cursor: 'pointer'\n          };\n      */\n\n      return React.createElement(Consumer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }, function (content) {\n        // console.log(content);\n        return React.createElement(\"div\", {\n          className: \"Group\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 65\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"image-Block\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 66\n          },\n          __self: this\n        }, React.createElement(\"figure\", {\n          className: \"image-Thumb ml-4 mr-4 p-2 col-sm\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 67\n          },\n          __self: this\n        }, React.createElement(\"img\", {\n          className: \"scenario\",\n          src: '/images/' + image,\n          alt: \"\" // style={{ cursor: 'pointer' }}\n          ,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 68\n          },\n          __self: this\n        }))), React.createElement(Form, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 76\n          },\n          __self: this\n        }, React.createElement(FormGroup, {\n          tag: \"fieldset\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 77\n          },\n          __self: this\n        }, React.createElement(\"legend\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 78\n          },\n          __self: this\n        }, question), React.createElement(FormGroup, {\n          check: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 79\n          },\n          __self: this\n        }, React.createElement(Label, {\n          check: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 80\n          },\n          __self: this\n        }, React.createElement(Input, {\n          type: \"radio\",\n          name: \"radio1\",\n          \"data-id\": \"1\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 81\n          },\n          __self: this\n        }), ' ', answer1)), React.createElement(FormGroup, {\n          check: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 85\n          },\n          __self: this\n        }, React.createElement(Label, {\n          check: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 86\n          },\n          __self: this\n        }, React.createElement(Input, {\n          type: \"radio\",\n          name: \"radio2\",\n          \"data-id\": \"2\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 87\n          },\n          __self: this\n        }), ' ', answer2)), React.createElement(FormGroup, {\n          check: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 91\n          },\n          __self: this\n        }, React.createElement(Label, {\n          check: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 92\n          },\n          __self: this\n        }, React.createElement(Input, {\n          type: \"radio\",\n          name: \"radio3\",\n          \"data-id\": \"3\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 93\n          },\n          __self: this\n        }), ' ', answer3))), _this2.state.answered === false ? React.createElement(Button, {\n          onClick: _this2.showResult,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 99\n          },\n          __self: this\n        }, \"Submit\") : null), _this2.state.answered === true ? _this2.state.passed === true ? React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 104\n          },\n          __self: this\n        }, congrats) : React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 105\n          },\n          __self: this\n        }, reaction) : null, _this2.state.answered === true ? React.createElement(Button, {\n          onClick: _this2.props.nextGroupHandler(true),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 108\n          },\n          __self: this\n        }, \"Next\") : null);\n      });\n    }\n  }]);\n\n  return Group;\n}(Component);\n\nGroup.propTypes = {\n  group: propTypes.object.isRequired\n};\nexport default Group;","map":{"version":3,"sources":["/home/devugees/Desktop/reactjs/quiz/src/components/Group.js"],"names":["React","Component","propTypes","Consumer","axios","Button","Form","FormGroup","Label","Input","FormText","Group","state","answered","passed","showResult","right","event","preventDefault","dataId","setState","props","group","id","image","question","answer1","answer2","answer3","congrats","reaction","content","nextGroupHandler","object","isRequired"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport propTypes from 'prop-types';\nimport { Consumer } from '../Context';\nimport axios from 'axios';\n\nimport { Button, Form, FormGroup, Label, Input, FormText } from 'reactstrap';\n\n// JSX\nclass Group extends Component {\n\n  // Two variables. One have true when the user answered.\n  // The second one works as a switch between right and wrong answers\n  state = {\n    answered: false,\n    passed: false\n  }\n\n  /* This function verifies if the user chose the right answer.\n     If so, the \"passed\" variable is updated to \"true\". This way \n     the greetings are shown. If not, the notification of\n     wrong answer must come out.\n     Also the variable \"answered\" must be set to true,\n     so the user can see the result of the made choice.\n  */\n  showResult = (right, event) => {\n    event.preventDefault();\n\n    if (dataId === right)\n      this.setState({\n        passed: true\n      });\n\n    this.setState({\n      answered: true\n    });\n  }\n\n  render() {\n    const { id, image, question, answer1, answer2, answer3, right, congrats, reaction } = this.props.group;\n/*\n    let imageHeader = {\n      display: 'flex',\n      flexDirection: 'row',\n      justifyContent: 'space-between'\n    };\n\n    let buttonStyle = {\n      borderRadius: '3px',\n      backgroundColor: '#e33',\n      color: 'white',\n      width: '36px',\n      height: '36px',\n      boxShadow:\n        '0 4px 8px 0 rgba(128, 98, 31, 0.2), 0 6px 20px 0 rgba(128, 98, 31, 0.19)',\n      fontSize: '1.0em',\n\n      cursor: 'pointer'\n    };\n*/\n    return (\n      <Consumer>\n        {content => {\n          // console.log(content);\n          return (\n            <div className=\"Group\">\n              <div className=\"image-Block\">\n                <figure className=\"image-Thumb ml-4 mr-4 p-2 col-sm\">\n                  <img\n                    className=\"scenario\"\n                    src={'/images/' + image}\n                    alt=\"\"\n                    // style={{ cursor: 'pointer' }}\n                  />\n                </figure>\n              </div>\n              <Form>\n                <FormGroup tag=\"fieldset\">\n                  <legend>{question}</legend>\n                  <FormGroup check>\n                    <Label check>\n                      <Input type=\"radio\" name=\"radio1\" data-id=\"1\"/>{' '}\n                      {answer1}\n                    </Label>\n                  </FormGroup>\n                  <FormGroup check>\n                    <Label check>\n                      <Input type=\"radio\" name=\"radio2\" data-id=\"2\"/>{' '}\n                      {answer2}\n                    </Label>\n                  </FormGroup>\n                  <FormGroup check>\n                    <Label check>\n                      <Input type=\"radio\" name=\"radio3\" data-id=\"3\"/>{' '}\n                      {answer3}\n                    </Label>\n                  </FormGroup>\n                </FormGroup>\n                {this.state.answered === false ? \n                <Button onClick={this.showResult}>Submit</Button> :\n                null}\n              </Form>\n              {this.state.answered === true ?  \n              (this.state.passed === true ? \n              <span>{congrats}</span> : \n              <span>{reaction}</span>):\n              null}\n              {this.state.answered === true ? \n                <Button onClick={this.props.nextGroupHandler(true)}>Next</Button> :\n                null}\n            </div>\n          );\n        }}\n      </Consumer>\n    );\n  }\n}\n\nGroup.propTypes = {\n  group: propTypes.object.isRequired\n};\n\nexport default Group;\n"]},"metadata":{},"sourceType":"module"}