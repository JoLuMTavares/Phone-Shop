{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"/home/devugees/Desktop/react/ajax_4/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/devugees/Desktop/react/ajax_4/node_modules/@babel/runtime/helpers/createClass\");\n\nvar Hook =\n/*#__PURE__*/\nfunction () {\n  function Hook(args) {\n    _classCallCheck(this, Hook);\n\n    if (!Array.isArray(args)) args = [];\n    this._args = args;\n    this.taps = [];\n    this.interceptors = [];\n    this.call = this._call;\n    this.promise = this._promise;\n    this.callAsync = this._callAsync;\n    this._x = undefined;\n  }\n\n  _createClass(Hook, [{\n    key: \"compile\",\n    value: function compile(options) {\n      throw new Error(\"Abstract: should be overriden\");\n    }\n  }, {\n    key: \"_createCall\",\n    value: function _createCall(type) {\n      return this.compile({\n        taps: this.taps,\n        interceptors: this.interceptors,\n        args: this._args,\n        type: type\n      });\n    }\n  }, {\n    key: \"tap\",\n    value: function tap(options, fn) {\n      if (typeof options === \"string\") options = {\n        name: options\n      };\n      if (typeof options !== \"object\" || options === null) throw new Error(\"Invalid arguments to tap(options: Object, fn: function)\");\n      options = Object.assign({\n        type: \"sync\",\n        fn: fn\n      }, options);\n      if (typeof options.name !== \"string\" || options.name === \"\") throw new Error(\"Missing name for tap\");\n      options = this._runRegisterInterceptors(options);\n\n      this._insert(options);\n    }\n  }, {\n    key: \"tapAsync\",\n    value: function tapAsync(options, fn) {\n      if (typeof options === \"string\") options = {\n        name: options\n      };\n      if (typeof options !== \"object\" || options === null) throw new Error(\"Invalid arguments to tapAsync(options: Object, fn: function)\");\n      options = Object.assign({\n        type: \"async\",\n        fn: fn\n      }, options);\n      if (typeof options.name !== \"string\" || options.name === \"\") throw new Error(\"Missing name for tapAsync\");\n      options = this._runRegisterInterceptors(options);\n\n      this._insert(options);\n    }\n  }, {\n    key: \"tapPromise\",\n    value: function tapPromise(options, fn) {\n      if (typeof options === \"string\") options = {\n        name: options\n      };\n      if (typeof options !== \"object\" || options === null) throw new Error(\"Invalid arguments to tapPromise(options: Object, fn: function)\");\n      options = Object.assign({\n        type: \"promise\",\n        fn: fn\n      }, options);\n      if (typeof options.name !== \"string\" || options.name === \"\") throw new Error(\"Missing name for tapPromise\");\n      options = this._runRegisterInterceptors(options);\n\n      this._insert(options);\n    }\n  }, {\n    key: \"_runRegisterInterceptors\",\n    value: function _runRegisterInterceptors(options) {\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = this.interceptors[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var interceptor = _step.value;\n\n          if (interceptor.register) {\n            var newOptions = interceptor.register(options);\n            if (newOptions !== undefined) options = newOptions;\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      return options;\n    }\n  }, {\n    key: \"withOptions\",\n    value: function withOptions(options) {\n      var mergeOptions = function mergeOptions(opt) {\n        return Object.assign({}, options, typeof opt === \"string\" ? {\n          name: opt\n        } : opt);\n      }; // Prevent creating endless prototype chains\n\n\n      options = Object.assign({}, options, this._withOptions);\n      var base = this._withOptionsBase || this;\n      var newHook = Object.create(base);\n      newHook.tapAsync = function (opt, fn) {\n        return base.tapAsync(mergeOptions(opt), fn);\n      }, newHook.tap = function (opt, fn) {\n        return base.tap(mergeOptions(opt), fn);\n      };\n\n      newHook.tapPromise = function (opt, fn) {\n        return base.tapPromise(mergeOptions(opt), fn);\n      };\n\n      newHook._withOptions = options;\n      newHook._withOptionsBase = base;\n      return newHook;\n    }\n  }, {\n    key: \"isUsed\",\n    value: function isUsed() {\n      return this.taps.length > 0 || this.interceptors.length > 0;\n    }\n  }, {\n    key: \"intercept\",\n    value: function intercept(interceptor) {\n      this._resetCompilation();\n\n      this.interceptors.push(Object.assign({}, interceptor));\n\n      if (interceptor.register) {\n        for (var i = 0; i < this.taps.length; i++) {\n          this.taps[i] = interceptor.register(this.taps[i]);\n        }\n      }\n    }\n  }, {\n    key: \"_resetCompilation\",\n    value: function _resetCompilation() {\n      this.call = this._call;\n      this.callAsync = this._callAsync;\n      this.promise = this._promise;\n    }\n  }, {\n    key: \"_insert\",\n    value: function _insert(item) {\n      this._resetCompilation();\n\n      var before;\n      if (typeof item.before === \"string\") before = new Set([item.before]);else if (Array.isArray(item.before)) {\n        before = new Set(item.before);\n      }\n      var stage = 0;\n      if (typeof item.stage === \"number\") stage = item.stage;\n      var i = this.taps.length;\n\n      while (i > 0) {\n        i--;\n        var x = this.taps[i];\n        this.taps[i + 1] = x;\n        var xStage = x.stage || 0;\n\n        if (before) {\n          if (before.has(x.name)) {\n            before.delete(x.name);\n            continue;\n          }\n\n          if (before.size > 0) {\n            continue;\n          }\n        }\n\n        if (xStage > stage) {\n          continue;\n        }\n\n        i++;\n        break;\n      }\n\n      this.taps[i] = item;\n    }\n  }]);\n\n  return Hook;\n}();\n\nfunction createCompileDelegate(name, type) {\n  return function lazyCompileHook() {\n    this[name] = this._createCall(type);\n    return this[name].apply(this, arguments);\n  };\n}\n\nObject.defineProperties(Hook.prototype, {\n  _call: {\n    value: createCompileDelegate(\"call\", \"sync\"),\n    configurable: true,\n    writable: true\n  },\n  _promise: {\n    value: createCompileDelegate(\"promise\", \"promise\"),\n    configurable: true,\n    writable: true\n  },\n  _callAsync: {\n    value: createCompileDelegate(\"callAsync\", \"async\"),\n    configurable: true,\n    writable: true\n  }\n});\nmodule.exports = Hook;","map":null,"metadata":{},"sourceType":"script"}