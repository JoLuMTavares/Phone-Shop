{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar util = require(\"util\");\n\nvar SyncBailHook = require(\"./SyncBailHook\");\n\nfunction Tapable() {\n  var _this = this;\n\n  this._pluginCompat = new SyncBailHook([\"options\"]);\n\n  this._pluginCompat.tap({\n    name: \"Tapable camelCase\",\n    stage: 100\n  }, function (options) {\n    options.names.add(options.name.replace(/[- ]([a-z])/g, function (str, ch) {\n      return ch.toUpperCase();\n    }));\n  });\n\n  this._pluginCompat.tap({\n    name: \"Tapable this.hooks\",\n    stage: 200\n  }, function (options) {\n    var hook;\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = options.names[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var name = _step.value;\n        hook = _this.hooks[name];\n\n        if (hook !== undefined) {\n          break;\n        }\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    if (hook !== undefined) {\n      var tapOpt = {\n        name: options.fn.name || \"unnamed compat plugin\",\n        stage: options.stage || 0\n      };\n      if (options.async) hook.tapAsync(tapOpt, options.fn);else hook.tap(tapOpt, options.fn);\n      return true;\n    }\n  });\n}\n\nmodule.exports = Tapable;\n\nTapable.addCompatLayer = function addCompatLayer(instance) {\n  Tapable.call(instance);\n  instance.plugin = Tapable.prototype.plugin;\n  instance.apply = Tapable.prototype.apply;\n};\n\nTapable.prototype.plugin = util.deprecate(function plugin(name, fn) {\n  if (Array.isArray(name)) {\n    name.forEach(function (name) {\n      this.plugin(name, fn);\n    }, this);\n    return;\n  }\n\n  var result = this._pluginCompat.call({\n    name: name,\n    fn: fn,\n    names: new Set([name])\n  });\n\n  if (!result) {\n    throw new Error(\"Plugin could not be registered at '\".concat(name, \"'. Hook was not found.\\n\") + \"BREAKING CHANGE: There need to exist a hook at 'this.hooks'. \" + \"To create a compatibility layer for this hook, hook into 'this._pluginCompat'.\");\n  }\n}, \"Tapable.plugin is deprecated. Use new API on `.hooks` instead\");\nTapable.prototype.apply = util.deprecate(function apply() {\n  for (var i = 0; i < arguments.length; i++) {\n    arguments[i].apply(this);\n  }\n}, \"Tapable.apply is deprecated. Call apply on the plugin directly instead\");","map":null,"metadata":{},"sourceType":"script"}