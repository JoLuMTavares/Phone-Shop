{"ast":null,"code":"import _regeneratorRuntime from \"/home/devugees/Desktop/reactjs/quiz/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/devugees/Desktop/reactjs/quiz/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/devugees/Desktop/reactjs/quiz/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/devugees/Desktop/reactjs/quiz/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/devugees/Desktop/reactjs/quiz/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/devugees/Desktop/reactjs/quiz/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/devugees/Desktop/reactjs/quiz/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/devugees/Desktop/reactjs/quiz/src/components/Quiz.js\";\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport Group from './Group';\nimport { Consumer } from '../Context';\nimport Veridict from \"../pages/Veridict\"; // JSX\n\nvar Quiz =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Quiz, _Component);\n\n  function Quiz() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Quiz);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Quiz)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      currentIndex: 0,\n      rightAnswers: 0,\n      wrongAnswers: 0,\n      finalResult: 0,\n      finalVeridict: {\n        id: 0,\n        veridict: ''\n      },\n      completed: false\n      /* This function handles the each group of the quiz.\n          Each time the next button is pressed, the current\n          Index of the question is updated. This goes until\n          the last one.\n       */\n\n    };\n    return _this;\n  }\n\n  _createClass(Quiz, [{\n    key: \"handleNextBlock\",\n    value: function handleNextBlock(passed) {\n      if (passed) {\n        var value = this.state.rightAnswers + 1;\n        this.setState({\n          rightAnswers: value\n        });\n      }\n    }\n    /* The final stage. When the last question is answered and the\n       user did press the nex button, this will act. It will\n       calculate the percentage of success. Based on that,\n       it will load the right veridict. This will be shown to the user.\n    */\n\n  }, {\n    key: \"componentDidUpdate\",\n    value: function () {\n      var _componentDidUpdate = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var calculation, choice, difference, response, cIndex;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!(this.state.currentIndex === 14)) {\n                  _context.next = 18;\n                  break;\n                }\n\n                // Getting the result of the quiz. This will be shonw as a percentage\n                calculation = Math.round(this.stage.rightAnswers / 15 * 100, 2);\n                choice = 0; // Now all the conditions to apply the right value to the choice.\n\n                if (calculation > 0 && calculation < 25) choice = 1;else if (calculation >= 25 && calculation < 35) choice = 2;else if (calculation >= 35 && calculation < 45) choice = 3;else if (calculation >= 45 && calculation < 56, 5) choice = 4;else if (calculation >= 56, 5 && calculation < 73) choice = 5;else if (calculation >= 73 && calculation < 80) choice = 6;else if (calculation >= 80 && calculation < 95) choice = 7;else if (calculation >= 95 && calculation < 100) choice = 8;else choice = 9;\n                difference = 15 - this.stage.rightAnswers;\n                _context.prev = 5;\n                _context.next = 8;\n                return axios.get('http://localhost:1024/loadveridict/' + choice);\n\n              case 8:\n                response = _context.sent;\n                console.log(response);\n                this.setState({\n                  finalVeridict: response.data.evaluation,\n                  completed: true,\n                  wrongAnswers: difference,\n                  finalResult: calculation\n                }); // console.log(this.state.groups);\n\n                _context.next = 16;\n                break;\n\n              case 13:\n                _context.prev = 13;\n                _context.t0 = _context[\"catch\"](5);\n                console.log(_context.t0);\n\n              case 16:\n                _context.next = 20;\n                break;\n\n              case 18:\n                cIndex = this.state.currentIndex + 1;\n                this.setState({\n                  currentIndex: cIndex\n                });\n\n              case 20:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[5, 13]]);\n      }));\n\n      return function componentDidUpdate() {\n        return _componentDidUpdate.apply(this, arguments);\n      };\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(Consumer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }, function (content) {\n        var groups = content.groups;\n        console.log(groups);\n        return React.createElement(React.Fragment, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 110\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"main-column\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 114\n          },\n          __self: this\n        }, React.createElement(Group, {\n          key: groups[_this2.state.currentIndex].id,\n          id: groups[_this2.state.currentIndex].id,\n          image: groups[_this2.state.currentIndex].image,\n          question: groups[_this2.state.currentIndex].question,\n          group: groups[_this2.state.currentIndex],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 115\n          },\n          __self: this\n        })), React.createElement(\"div\", {\n          className: \"end-page\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 123\n          },\n          __self: this\n        }, React.createElement(Veridict, {\n          key: \"1\",\n          id: \"1\",\n          rightAnswers: _this2.state.rightAnswers,\n          wrongAnswers: _this2.state.wrongAnswers,\n          finalResult: _this2.state.finalResult,\n          veridict: _this2.state.finalVeridict.veridict,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 124\n          },\n          __self: this\n        })));\n      });\n    }\n  }]);\n\n  return Quiz;\n}(Component);\n\nexport default Quiz;","map":{"version":3,"sources":["/home/devugees/Desktop/reactjs/quiz/src/components/Quiz.js"],"names":["React","Component","axios","Group","Consumer","Veridict","Quiz","state","currentIndex","rightAnswers","wrongAnswers","finalResult","finalVeridict","id","veridict","completed","passed","value","setState","calculation","Math","round","stage","choice","difference","get","response","console","log","data","evaluation","cIndex","content","groups","image","question"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nimport axios from 'axios';\n\nimport Group from './Group';\nimport { Consumer } from '../Context';\n\nimport Veridict from \"../pages/Veridict\";\n\n// JSX\n\nclass Quiz extends Component {\n\n  state = {\n    currentIndex: 0,\n    rightAnswers: 0,\n    wrongAnswers: 0,\n    finalResult: 0,\n    finalVeridict: {\n      id: 0,\n      veridict: ''\n    },\n    completed: false\n  }\n\n  /* This function handles the each group of the quiz.\n      Each time the next button is pressed, the current\n      Index of the question is updated. This goes until\n      the last one.\n   */\n  handleNextBlock(passed){\n    if (passed) {\n      let value = this.state.rightAnswers + 1;\n      this.setState({\n        rightAnswers: value\n      });\n      \n    }\n    \n\n  }\n\n/* The final stage. When the last question is answered and the\n   user did press the nex button, this will act. It will\n   calculate the percentage of success. Based on that,\n   it will load the right veridict. This will be shown to the user.\n*/\n  async componentDidUpdate() {\n    \n    // Checking if the last question was answered\n    if (this.state.currentIndex === 14){\n\n      // Getting the result of the quiz. This will be shonw as a percentage\n      let calculation = Math.round((this.stage.rightAnswers / 15) * 100, 2);\n      let choice = 0; \n      // Now all the conditions to apply the right value to the choice.\n      if (calculation > 0 && calculation < 25)\n        choice = 1;\n      else if (calculation >= 25 && calculation < 35)\n        choice = 2;\n      else if (calculation >= 35 && calculation < 45)\n        choice = 3;\n      else if (calculation >= 45 && calculation < 56,5)\n        choice = 4;\n      else if (calculation >= 56,5 && calculation < 73)\n        choice = 5;\n      else if (calculation >= 73 && calculation < 80)\n        choice = 6;\n      else if (calculation >= 80 && calculation < 95)\n        choice = 7;\n      else if (calculation >= 95 && calculation < 100)\n        choice = 8;\n      else \n        choice = 9;\n\n      let difference = 15 - this.stage.rightAnswers;\n\n      try {\n        // Sending the request with the choice as the identifier for the veridict\n      const response = await axios.get('http://localhost:1024/loadveridict/' + choice);\n      console.log(response);\n\n      this.setState({\n        finalVeridict: response.data.evaluation,\n        completed: true,\n        wrongAnswers: difference,\n        finalResult: calculation\n      });\n        // console.log(this.state.groups);\n      } catch (error) {\n        console.log(error);\n      }\n    }\n    else {\n      let cIndex = this.state.currentIndex + 1;\n      this.setState({\n        currentIndex: cIndex\n      });\n    }\n  }\n\n  render() {\n    return (\n      <Consumer>\n        {content => {\n\n          let groups = content.groups;\n          console.log(groups);\n          return (\n            <React.Fragment>\n              {/* <h1 className=\"display-5 mb-2\">\n                <span className=\"text-danger\">Contact</span> List\n              </h1> */}\n              <div className=\"main-column\">\n                  <Group\n                    key={groups[this.state.currentIndex].id}\n                    id={groups[this.state.currentIndex].id}\n                    image={groups[this.state.currentIndex].image}\n                    question={groups[this.state.currentIndex].question}\n                    group={groups[this.state.currentIndex]}\n                  />\n              </div>\n              <div className=\"end-page\">\n                  <Veridict key=\"1\" id=\"1\" rightAnswers={this.state.rightAnswers}  wrongAnswers={this.state.wrongAnswers} finalResult={this.state.finalResult} veridict={this.state.finalVeridict.veridict}/>\n              </div>\n            </React.Fragment>\n          );\n        }}\n      </Consumer>\n    );\n  }\n}\n\nexport default Quiz;\n"]},"metadata":{},"sourceType":"module"}